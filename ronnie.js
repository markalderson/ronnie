// Generated by CoffeeScript 1.10.0
(function() {
  var Ronnie,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Ronnie = {
    parse: function(structure) {
      var i, len, main_module, main_module_name, module, modules;
      structure = JSON.parse(structure);
      modules = structure.modules;
      main_module_name = structure.main;
      for (i = 0, len = modules.length; i < len; i++) {
        module = modules[i];
        if (module.name === main_module_name) {
          main_module = module;
        }
      }
      return {
        modules: modules,
        main_module: main_module
      };
    },
    module: function(modules, name) {
      var i, len, m;
      for (i = 0, len = modules.length; i < len; i++) {
        m = modules[i];
        if (m.name === name) {
          return m;
        }
      }
    },
    dependencies: function(modules, module) {
      var dep_name, deps, i, len, ref;
      deps = [];
      if (module.requires != null) {
        ref = module.requires;
        for (i = 0, len = ref.length; i < len; i++) {
          dep_name = ref[i];
          deps.push(this.module(modules, dep_name));
        }
      }
      return deps;
    },
    errorMessage: function(error_data) {
      var message, module;
      message = 'Ronnie: ';
      if (error_data.circular_dependency) {
        message += 'Circular Dependency: ' + ((function() {
          var i, len, ref, results;
          ref = error_data.sequence;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            module = ref[i];
            results.push(module.name + " -> ");
          }
          return results;
        })()).join('');
        return message.substring(0, message.length - 4);
      }
    },
    circularDependenciesCheck: function(modules, main_module) {
      return this.recursiveCircularDependenciesCheck(modules, main_module, [main_module]);
    },
    recursiveCircularDependenciesCheck: function(modules, module, path) {
      var dep, deps, error, error_data, i, len, new_path, results;
      deps = Ronnie.dependencies(modules, module);
      results = [];
      for (i = 0, len = deps.length; i < len; i++) {
        dep = deps[i];
        if (indexOf.call(path, dep) >= 0) {
          error_data = {
            circular_dependency: true,
            sequence: path.concat([dep])
          };
          error = new Error(this.errorMessage(error_data));
          error.data = error_data;
          throw error;
        } else {
          new_path = path.concat([dep]);
          results.push(this.recursiveCircularDependenciesCheck(modules, dep, new_path));
        }
      }
      return results;
    }
  };

  window.Ronnie = Ronnie;

}).call(this);
