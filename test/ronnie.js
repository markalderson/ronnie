// Generated by CoffeeScript 1.10.0
(function() {
  describe('Ronnie', function() {
    it('finds the main module in your JSON structure', function() {
      var main_module, modules, ref, structure, structure_string;
      structure = {
        main: 'foo',
        modules: [
          {
            name: 'foo'
          }
        ]
      };
      structure_string = JSON.stringify(structure);
      ref = Ronnie.parse(structure_string), modules = ref.modules, main_module = ref.main_module;
      expect(modules).toEqual(structure.modules);
      return expect(main_module.name).toEqual('foo');
    });
    it('knows how to fetch a module given its name', function() {
      var bar, foo, main_module, modules, ref, structure, structure_string;
      structure = {
        main: 'foo',
        modules: [
          {
            name: 'foo'
          }
        ]
      };
      structure_string = JSON.stringify(structure);
      ref = Ronnie.parse(structure_string), modules = ref.modules, main_module = ref.main_module;
      foo = Ronnie.module(modules, 'foo');
      expect(foo).toEqual(main_module);
      expect(foo.name).toEqual('foo');
      bar = Ronnie.module(modules, 'bar');
      return expect(bar).not.toBeDefined();
    });
    it('knows how to fetch a module\'s dependencies', function() {
      var bar, foo, main_module, modules, ref, structure, structure_string;
      foo = {
        name: 'foo',
        requires: ['bar']
      };
      bar = {
        name: 'bar'
      };
      structure = {
        main: 'foo',
        modules: [foo, bar]
      };
      structure_string = JSON.stringify(structure);
      ref = Ronnie.parse(structure_string), modules = ref.modules, main_module = ref.main_module;
      expect(Ronnie.dependencies(modules, foo)).toEqual([bar]);
      return expect(Ronnie.dependencies(modules, bar)).toEqual([]);
    });
    it('throws an error when you have circular dependencies', function() {
      var bar, error, error1, foo, main_module, module, modules, ref, ref1, structure, structure_string;
      foo = {
        name: 'foo',
        requires: ['bar']
      };
      bar = {
        name: 'bar',
        requires: ['foo']
      };
      structure = {
        main: 'foo',
        modules: [foo, bar]
      };
      structure_string = JSON.stringify(structure);
      ref = Ronnie.parse(structure_string), modules = ref.modules, main_module = ref.main_module;
      expect(function() {
        return Ronnie.circularDependenciesCheck(modules, main_module);
      }).toThrowError('Ronnie: Circular Dependency: foo -> bar -> foo');
      try {
        Ronnie.circularDependenciesCheck(modules, main_module);
      } catch (error1) {
        error = error1;
        expect(error.data.circular_dependency).toEqual(true);
        expect((function() {
          var i, len, ref1, results;
          ref1 = error.data.sequence;
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            module = ref1[i];
            results.push(module.name);
          }
          return results;
        })()).toEqual(['foo', 'bar', 'foo']);
      }
      bar = {
        name: 'bar'
      };
      structure = {
        main: 'foo',
        modules: [foo, bar]
      };
      structure_string = JSON.stringify(structure);
      ref1 = Ronnie.parse(structure_string), modules = ref1.modules, main_module = ref1.main_module;
      return expect(function() {
        return Ronnie.circularDependenciesCheck(modules, main_module);
      }).not.toThrow();
    });
    return it('knows how to asynchronously load a script given its url', function(done) {
      return Ronnie.loadScript('base/test/global.js').then(function() {
        expect(GLOBAL).toBeDefined();
        expect(GLOBAL).toEqual('GLOBAL');
        return done();
      });
    });
  });

}).call(this);
